@page "/configuration"
@using PlantMonitorWebApp.Client.DataAccessor;
@using PlantMonitorWebApp.Shared
@using PlantMonitorWebApp.Shared.Models
@using PlantMonitorWebApp.Shared.ViewModels;
@using System.Net;
@inject HttpClient Http
@inject PlantAccessor plantAccessor
@inject SensorAccessor sensorAccessor

<PageTitle>Sensor configuration</PageTitle>

<h1>Configuration</h1>

<RadzenTabs TabPosition="TabPosition.Top" style="height: 504px; width: 1400px; margin: 20px auto;" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Sensors">

            <RadzenDataGrid @ref="_sensorDataGrid" AllowFiltering="true" AllowColumnResize="false" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                            Data="@_sensors" TItem="SensorView" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="SensorView" Context="sensor" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                        <Template Context="sensor">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditSensorRow(sensor))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="sensor">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveSensorRow(sensor))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelSensorEdit(sensor))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SensorView" Context="sensor" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="30px">
                        <Template Context="sensor">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteSensorRow(sensor))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="sensor">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteSensorRow(sensor))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SensorView" Property="Name" Title="Beschreibung" Frozen="false" Width="300px">
                        <EditTemplate Context="sensor">
                            <RadzenTextBox @bind-Value="sensor.Name" Style="width:100%; display: block" Name="sensorName" />
                            <RadzenRequiredValidator Text="Sensor description is required" Component="sensorName" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="SensorView" Property="UriString" Title="URL" Frozen="false" Width="300px" >
                        <EditTemplate Context="sensor">
                            <RadzenTextBox @bind-Value="sensor.UriString" Style="width:100%; display: block" Name="sensorServiceUri" />
                            <RadzenRequiredValidator Text="Sensor service URI is required" Component="sensorServiceUri" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>

        <RadzenTabsItem Text="Plants">


            <RadzenDataGrid @ref="_plantDataGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                            Data="@_plants" TItem="Plant" ColumnWidth="500px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Plant" Property="Name" Filterable="true" Title="Name" Frozen="false" Width="140px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="Plant" Title="Foto" Frozen="false" Sortable="false" Filterable="false" Width="60px">
                        <Template Context="data">
                            <RadzenImage Path="@data.ImageUrl" style="width: 40px; height: 40px; border-radius: 8px;" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Plant" Property="Sensor.Id" Title="Sensor" Frozen="false" Width="70px" />
                    <RadzenDataGridColumn TItem="Plant" Property="Description" Title="Beschreibung" Frozen="false" Width="200px" />
                </Columns>
            </RadzenDataGrid>


        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


@code {
    RadzenDataGrid<SensorView> _sensorDataGrid;
    RadzenDataGrid<Plant> _plantDataGrid;

    List<SensorView> _sensors;
    IEnumerable<Plant> _plants;

    SensorView? _sensorToInsert;

    protected override async Task OnInitializedAsync()
    {
        InitSensors();
        await InitPlants();
    }

    private async void InitSensors()
    {
        var sensors = await sensorAccessor.GetSensorsAsync();
        _sensors = new List<SensorView>();
        foreach (Sensor sensor in sensors)
        {
            _sensors.Add(new SensorView(sensor));
        }
        await _sensorDataGrid.Reload();
    }

    private async Task InitPlants()
    {
        _plants = await plantAccessor.GetPlantsAsync();
        await _plantDataGrid.Reload();
    }

    async Task EditSensorRow(SensorView sensor)
    {
        await _sensorDataGrid.EditRow(sensor);
    }

    async Task SaveSensorRow(SensorView sensor)
    {
        if (sensor == _sensorToInsert)
        {
            _sensorToInsert = null;
        }

        var result = await sensorAccessor.UpdateSensorAsync(sensor.ToSensor());
        if (result.StatusCode != HttpStatusCode.OK)
        {
            // error
        }
        await _sensorDataGrid.UpdateRow(sensor);
    }

    void CancelSensorEdit(SensorView sensor)
    {
        if (sensor == _sensorToInsert)
        {
            _sensorToInsert = null;
        }

        _sensorDataGrid.CancelEditRow(sensor);
    }

    async Task DeleteSensorRow(SensorView sensor)
    {
        if (sensor == _sensorToInsert)
        {
            _sensorToInsert = null;
        }

        if (_sensors.Contains(sensor))
        {
            var result = await sensorAccessor.DeleteSensorAsync(sensor.Id);
            if (result.StatusCode != HttpStatusCode.OK)
            {
                // error
            }
            await _sensorDataGrid.Reload();
        }
        else
        {
            _sensorDataGrid.CancelEditRow(sensor);
        }
    }

}

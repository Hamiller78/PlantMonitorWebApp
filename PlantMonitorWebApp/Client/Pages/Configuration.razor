@page "/configuration"
@using PlantMonitorWebApp.Client.DataFetcher;
@using PlantMonitorWebApp.Shared
@using PlantMonitorWebApp.Shared.Models
@inject HttpClient Http
@inject PlantFetcher plantFetcher
@inject SensorFetcher sensorFetcher

<PageTitle>Sensor configuration</PageTitle>

<h1>Configuration</h1>

<RadzenTabs TabPosition="TabPosition.Top" style="height: 504px; width: 1400px; margin: 20px auto;" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Sensors">

            <RadzenDataGrid @ref="_sensorDataGrid" AllowFiltering="true" AllowColumnResize="false" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                            Data="@_sensors" TItem="Sensor" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>

                    <RadzenDataGridColumn TItem="Sensor" Context="sensor" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="30px">
                        <Template Context="sensor">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditSensorRow(sensor))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="sensor">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveSensorRow(sensor))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelSensorEdit(sensor))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Sensor" Context="sensor" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="30px">
                        <Template Context="sensor">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteSensorRow(sensor))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="sensor">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteSensorRow(sensor))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Sensor" Property="Id" Title="Sensor" Frozen="false" Width="35px" />
                    <RadzenDataGridColumn TItem="Sensor" Property="ServiceUri" Title="URL" Frozen="false" Width="70px" />
                </Columns>
            </RadzenDataGrid>


        </RadzenTabsItem>
        <RadzenTabsItem Text="Plants">


            <RadzenDataGrid @ref="_plantDataGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                            Data="@_plants" TItem="Plant" ColumnWidth="500px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Plant" Property="Name" Filterable="true" Title="Name" Frozen="false" Width="140px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="Plant" Title="Foto" Frozen="false" Sortable="false" Filterable="false" Width="60px">
                        <Template Context="data">
                            <RadzenImage Path="@data.ImageUrl" style="width: 40px; height: 40px; border-radius: 8px;" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Plant" Property="Sensor.Id" Title="Sensor" Frozen="false" Width="70px" />
                    <RadzenDataGridColumn TItem="Plant" Property="Description" Title="Beschreibung" Frozen="false" Width="200px" />
                </Columns>
            </RadzenDataGrid>


        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>


@code {
    RadzenDataGrid<Sensor> _sensorDataGrid;
    RadzenDataGrid<Plant> _plantDataGrid;

    IEnumerable<Sensor> _sensors;
    IEnumerable<Plant> _plants;

    Sensor? _sensorToInsert;

    protected override async Task OnInitializedAsync()
    {
        await InitSensors();
        await InitPlants();
    }

    private async Task InitSensors()
    {
        _sensors = await sensorFetcher.FetchSensorsAsync();
        await _sensorDataGrid.Reload();
    }

    private async Task InitPlants()
    {
        _plants = await plantFetcher.FetchPlantsAsync();
        await _plantDataGrid.Reload();
    }

    async Task EditSensorRow(Sensor sensor)
    {
        await _sensorDataGrid.EditRow(sensor);
    }   

   async Task SaveSensorRow(Sensor sensor)
    {
        if (sensor == _sensorToInsert)
        {
            _sensorToInsert = null;
        }

        await _sensorDataGrid.UpdateRow(sensor);
    }

   void CancelSensorEdit(Sensor sensor)
    {
        if (sensor == _sensorToInsert)
        {
            _sensorToInsert = null;
        }

        _sensorDataGrid.CancelEditRow(sensor);

        // For production
        //var orderEntry = dbContext.Entry(order);
        //if (orderEntry.State == EntityState.Modified)
        //{
        //    orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //    orderEntry.State = EntityState.Unchanged;
        //}
    }

    async Task DeleteSensorRow(Sensor sensor)
    {
        if (sensor == _sensorToInsert)
        {
            _sensorToInsert = null;
        }

        if (_sensors.Contains(sensor))
        {
  //          dbContext.Remove<Order>(order);

            // For demo purposes only
  //          orders.Remove(order);

            // For production
            //dbContext.SaveChanges();

            await _sensorDataGrid.Reload();
        }
        else
        {
            _sensorDataGrid.CancelEditRow(sensor);
        }
    }

}

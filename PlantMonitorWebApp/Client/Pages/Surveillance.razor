@page "/surveillance"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.ObjectModel;

@using PlantMonitorWebApp.Client.DataAccessor;
@using PlantMonitorWebApp.Shared
@using PlantMonitorWebApp.Shared.Models
@using PlantMonitorWebApp.Shared.TestClasses
@using PlantMonitorWebApp.Shared.ViewModels
@* implements IAsyncDisposable *@
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject PlantAccessor plantFetcher

<PageTitle>Plant surveillance</PageTitle>

<h1>Surveillance</h1>

<RadzenDataGrid @ref="_dataGrid" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                Data="@_plantViews" TItem="PlantView" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="PlantView" Property="Name" Filterable="true" Title="Name" Frozen="true" Width="140px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="PlantView" Title="Foto" Frozen="true" Sortable="false" Filterable="false" Width="60px">
            <Template Context="data">
                <RadzenImage Path="@data.ImageUrl" style="width: 40px; height: 40px; border-radius: 8px;" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="PlantView" Property="FormattedSensorValue" Title="Messwert" Frozen="true" Width="70px" />
        <RadzenDataGridColumn TItem="PlantView" Property="Description" Title="Beschreibung" Frozen="true" Width="200px" />
    </Columns>
</RadzenDataGrid>


@code {
    private RadzenDataGrid<PlantView> _dataGrid;
    private List<PlantView> _plantViews = new List<PlantView>();
    private HubConnection? _hubConnection;
    private List<string> _messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        InitPlants();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/sensorvaluehub"))
            .Build();

        _hubConnection.On<string, double>("SensorValueChanged", (sensorId, value) =>
        {
            UpdateSensor(sensorId, value);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SensorValueChanged", "0", 0d);
        }
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async void InitPlants()
    {
        IEnumerable<Plant> plantList = await plantFetcher.GetPlantsAsync();
        foreach (Plant plant in plantList)
        {
            PlantView newPlantView = new PlantView(plant);
            _plantViews.Add(newPlantView);
        }
        await _dataGrid.Reload();
    }

    private void UpdateSensor(string sensorId, double value)
    {
        // Leaves in theory some room for improvement (same sensor can be updated multiple times)
        // In practice each sensor will only be assigned to one plant
        foreach (PlantView plantView in _plantViews)
        {
            if (plantView.SensorId == Convert.ToInt32(sensorId))
            {
                plantView.SensorValue = value;
            }
        }
    }
}
@page "/surveillance"
@using Microsoft.AspNetCore.SignalR.Client
@using PlantMonitorWebApp.Shared
@using PlantMonitorWebApp.Shared.Models
@using PlantMonitorWebApp.Shared.TestClasses
@* implements IAsyncDisposable *@
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Plant surveillance</PageTitle>

<h1>Surveillance</h1>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                Data="@plants" TItem="Plant" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Plant" Property="Name" Filterable="true" Title="Name" Frozen="true" Width="140px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Plant" Title="Foto" Frozen="true" Sortable="false" Filterable="false" Width="60px">
            <Template Context="data">
                <RadzenImage Path="@data.ImageUrl" style="width: 40px; height: 40px; border-radius: 8px;" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Plant" Property="Description" Title="Beschreibung" Frozen="true" Width="200px" />
        <RadzenDataGridColumn TItem="Plant" Property="Sensor.FormattedSensorValue" Title="Messwert" Frozen="true" Width="7o0px" />
    </Columns>
</RadzenDataGrid>


@code {
    private IEnumerable<Plant>? plants;
    private IEnumerable<Sensor>? sensors;
    private HubConnection? _hubConnection;
    private List<string> _messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        InitSensors();
        InitPlants();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/sensorvaluehub"))
            .Build();

        _hubConnection.On<string, double>("SensorValueChanged", (sensorId, value) =>
        {
            UpdateSensor(sensorId, value);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SensorValueChanged", "0", 0d);
        }
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private void InitSensors()
    {
        sensors = new List<Sensor>
        {
            new Sensor() { SensorId = 1 },
            new Sensor() { SensorId = 2 }
        };
    }

    private void InitPlants()
    {
        plants = TestPlantProvider.GetTestPlantConfigurations();
    }

    private void UpdateSensor(string sensorId, double value)
    {
        if (sensors == null)
        {
            return;
        }

        foreach (Sensor sensor in sensors)
        {
            if (sensor.SensorId == Convert.ToInt32(sensorId))
            {
                sensor.SensorValue = value;
            }
        }
    }
}
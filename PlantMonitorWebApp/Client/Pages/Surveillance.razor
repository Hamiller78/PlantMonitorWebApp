@page "/surveillance"
@using Microsoft.AspNetCore.SignalR.Client
@using PlantMonitorWebApp.Shared
@using PlantMonitorWebApp.Shared.Models
@using PlantMonitorWebApp.Shared.TestClasses
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Plant surveillance</PageTitle>

<h1>Surveillance</h1>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                Data="@plants" TItem="Plant" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Plant" Property="Name" Filterable="true" Title="Name" Frozen="true" Width="140px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Plant" Title="Foto" Frozen="true" Sortable="false" Filterable="false" Width="60px">
            <Template Context="data">
                <RadzenImage Path="@data.ImageUrl" style="width: 40px; height: 40px; border-radius: 8px;" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Plant" Property="Description" Title="Beschreibung" Frozen="true" Width="200px" />
        <RadzenDataGridColumn TItem="Plant" Property="FormattedSensorValue" Title="Messwert" Frozen="true" Width="7o0px" />
    </Columns>
</RadzenDataGrid>


@code {
    private HubConnection? _hubConnection;
    private List<string> _messages = new List<string>();
    private IEnumerable<Plant>? _plants;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/sensorvaluehub"))
            .Build();

        _hubConnection.On<string, double>("SensorValueChanged", (sensorId, value) =>
        {
            UpdateSensor(sensorId, value);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        //plants = TestPlantProvider.GetTestPlantConfigurations();
        //
        //// Re-check values every second
        //System.Timers.Timer t = new System.Timers.Timer();
        //t.Elapsed += (s, e) => { InvokeAsync(StateHasChanged); };
        //t.Interval = 1000;
        //t.Start();
    }

    private void UpdateSensor(string sensorId, double value)
    {
        
    }
}